
==================================================================[[timothywongej]]
  //import static seedu.address.logic.commands.CommandTestUtil.VALID_FACULTY_AMY;
....................
  //import static seedu.address.logic.commands.CommandTestUtil.VALID_SKILL_AMY;
....................
  //package seedu.address.logic.parser;
....................
  //import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;
....................
  //import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;
....................
  //import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;
....................
  //import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;
....................
  //import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;
....................
  //import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;
....................
  //import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;
....................
  //import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;
....................
  //import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;
....................
  //import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;
....................
  //import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;
....................
  //import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;
....................
  //import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CLASSMATE;
....................
  //import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;
....................
  //import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;
....................
  //import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;
....................
  //import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;
....................
  //import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;
....................
  //import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;
....................
  //import org.junit.jupiter.api.Test;
....................
  //import seedu.address.commons.core.index.Index;
....................
  //import seedu.address.logic.commands.EditCommand;
....................
  //import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;
....................
  //import seedu.address.model.person.Address;
....................
  //import seedu.address.model.person.Email;
....................
  //import seedu.address.model.person.Name;
....................
  //import seedu.address.model.person.Phone;
....................
  //import seedu.address.model.tag.Tag;
....................
  //import seedu.address.testutil.EditPersonDescriptorBuilder;
....................
  //public class EditCommandParserTest {
....................
  //    private static final String TAG_EMPTY = " " + PREFIX_TAG;
....................
  //            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);
....................
  //    private EditCommandParser parser = new EditCommandParser();
....................
  //    public void parse_missingParts_failure() {
....................
  //        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);
....................
  //        assertParseFailure(parser, "1", EditCommand.MESSAGE_NOT_EDITED);
....................
  //        assertParseFailure(parser, "", MESSAGE_INVALID_FORMAT);
....................
  //    }
....................
  //    public void parse_invalidPreamble_failure() {
....................
  //        assertParseFailure(parser, "-5" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);
....................
  //        assertParseFailure(parser, "0" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);
....................
  //        assertParseFailure(parser, "1 some random string", MESSAGE_INVALID_FORMAT);
....................
  //        assertParseFailure(parser, "1 i/ string", MESSAGE_INVALID_FORMAT);
....................
  //    }
....................
  //    public void parse_invalidValue_failure() {
....................
  //        assertParseFailure(parser, "1" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);
....................
  //        assertParseFailure(parser, "1" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);
....................
  //        assertParseFailure(parser, "1" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);
....................
  //        assertParseFailure(parser, "1" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);
....................
  //        assertParseFailure(parser, "1" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);
....................
  //                Name.MESSAGE_CONSTRAINTS);
....................
  //    }
....................
  //    public void parse_allFieldsSpecified_success() {
....................
  //        Index targetIndex = INDEX_SECOND_PERSON;
....................
  //                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;
....................
  //                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();
....................
  //        EditCommand expectedCommand = new EditCommand(targetIndex, descriptor);
....................
  //        assertParseSuccess(parser, userInput, expectedCommand);
....................
  //    }
....................
  //    public void parse_someFieldsSpecified_success() {
....................
  //        Index targetIndex = INDEX_FIRST_PERSON;
....................
  //        String userInput = targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;
....................
  //                .withEmail(VALID_EMAIL_AMY).build();
....................
  //        EditCommand expectedCommand = new EditCommand(targetIndex, descriptor);
....................
  //        assertParseSuccess(parser, userInput, expectedCommand);
....................
  //    }
....................
  //    public void parse_oneFieldSpecified_success() {
....................
  //        Index targetIndex = INDEX_THIRD_PERSON;
....................
  //        String userInput = targetIndex.getOneBased() + NAME_DESC_AMY;
....................
  //        EditPersonDescriptor descriptor = new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();
....................
  //        EditCommand expectedCommand = new EditCommand(targetIndex, descriptor);
....................
  //        assertParseSuccess(parser, userInput, expectedCommand);
....................
  //        userInput = targetIndex.getOneBased() + PHONE_DESC_AMY;
....................
  //        descriptor = new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();
....................
  //        expectedCommand = new EditCommand(targetIndex, descriptor);
....................
  //        assertParseSuccess(parser, userInput, expectedCommand);
....................
  //        userInput = targetIndex.getOneBased() + EMAIL_DESC_AMY;
....................
  //        descriptor = new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();
....................
  //        expectedCommand = new EditCommand(targetIndex, descriptor);
....................
  //        assertParseSuccess(parser, userInput, expectedCommand);
....................
  //        userInput = targetIndex.getOneBased() + ADDRESS_DESC_AMY;
....................
  //        descriptor = new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();
....................
  //        expectedCommand = new EditCommand(targetIndex, descriptor);
....................
  //        assertParseSuccess(parser, userInput, expectedCommand);
....................
  //        userInput = targetIndex.getOneBased() + TAG_DESC_FRIEND;
....................
  //        descriptor = new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();
....................
  //        expectedCommand = new EditCommand(targetIndex, descriptor);
....................
  //        assertParseSuccess(parser, userInput, expectedCommand);
....................
  //    }
....................
  //    public void parse_multipleRepeatedFields_acceptsLast() {
....................
  //        Index targetIndex = INDEX_FIRST_PERSON;
....................
  //                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;
....................
  //                .build();
....................
  //        EditCommand expectedCommand = new EditCommand(targetIndex, descriptor);
....................
  //        assertParseSuccess(parser, userInput, expectedCommand);
....................
  //    }
....................
  //    public void parse_invalidValueFollowedByValidValue_success() {
....................
  //        Index targetIndex = INDEX_FIRST_PERSON;
....................
  //        String userInput = targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;
....................
  //        EditPersonDescriptor descriptor = new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();
....................
  //        EditCommand expectedCommand = new EditCommand(targetIndex, descriptor);
....................
  //        assertParseSuccess(parser, userInput, expectedCommand);
....................
  //                + PHONE_DESC_BOB;
....................
  //                .withAddress(VALID_ADDRESS_BOB).build();
....................
  //        expectedCommand = new EditCommand(targetIndex, descriptor);
....................
  //        assertParseSuccess(parser, userInput, expectedCommand);
....................
  //    }
....................
  //    public void parse_resetTags_success() {
....................
  //        Index targetIndex = INDEX_THIRD_PERSON;
....................
  //        String userInput = targetIndex.getOneBased() + TAG_EMPTY;
....................
  //        EditPersonDescriptor descriptor = new EditPersonDescriptorBuilder().withTags().build();
....................
  //        EditCommand expectedCommand = new EditCommand(targetIndex, descriptor);
....................
  //        assertParseSuccess(parser, userInput, expectedCommand);
....................
  //    }
....................
  //}

==================================================================[[EltonGohJH]]
  // Predicate<Group> PREDICATE_SHOW_ALL_GROUPS = unused -> true;
....................
  //    public void execute_validCommand_success() throws Exception {
....................
  //        String listCommand = "person /list";
....................
  //        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);
....................
  //    }
....................
  //    public void parseCommand_edit() throws Exception {
....................
  //        Person person = new PersonBuilder().build();
....................
  //        PersonEditDescriptor descriptor = new PersonEditDescriptorBuilder(person).build();
....................
  //        assertEquals(new PersonEditCommand(INDEX_FIRST_PERSON, descriptor), command);
....................
  //    }
....................
  //    public void parseCommand_find() throws Exception {
....................
  //        List<String> keywords = Arrays.asList("foo", "bar", "baz");
....................
  //                FindCommand.COMMAND_WORD + " " + String.join(" ", keywords));
....................
  //        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);
....................
  //    }
....................
  //    public void parseCommand_list() throws Exception {
....................
  //        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);
....................
  //        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + " 3") instanceof ListCommand);
....................
  //    }
....................
  //    public void parse_compulsoryFieldMissing_failure() {
....................
  //                PHONE_DESC_BOB, EMAIL_DESC_BOB);
....................
  //        assertParseFailure(notorParser, noName, MESSAGE_UNKNOWN_COMMAND);
....................
  //    }
....................
  //    public void parse_missingParts_failure() {
....................
  //        String invalidCommand = String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE);
....................
  //        String noIndex = String.format("person /edit%s", NAME_DESC_BOB);
....................
  //        assertParseFailure(notorParser, noIndex, MESSAGE_UNKNOWN_COMMAND);
....................
  //        String noField = "person 1 /edit";
....................
  //        assertParseFailure(notorParser, noField, PersonEditCommand.MESSAGE_NOT_EDITED);
....................
  //        String noIndexField = "person /edit";
....................
  //        assertParseFailure(notorParser, noIndexField, MESSAGE_UNKNOWN_COMMAND);
....................
  //    }
....................
  //    public void parse_emptyArg_throwsParseException() {
....................
  //    }
....................
  //    public void parse_validArgs_returnsFindCommand() {
....................
  //                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList("Alice", "Bob")));
....................
  //        assertParseSuccess(parser, "Alice Bob", expectedFindCommand);
....................
  //        assertParseSuccess(parser, " \n Alice \n \t Bob  \t", expectedFindCommand);
....................
  //    }

==================================================================[[zhangchengchuan]]
  // Set<Tag> updatedTags = editTaskDescriptor.getTags().orElse(taskToEdit.getTags());
....................
  //                   @JsonProperty("tagged") List<JsonAdaptedTag> tagged) {
....................
  //if (tagged != null) {
....................
  //    this.tagged.addAll(tagged);
....................
  //  }
....................
  //        .collect(Collectors.toList());
....................
  //final List<Tag> taskTags = new ArrayList<>();
....................
  //for (JsonAdaptedTag tag : tagged) {
....................
  //    taskTags.add(tag.toModelType());
....................
  //}
....................
  //private static final String INVALID_DESCRIPTION = " ";
....................
  //private static final String INVALID_MODULE = "example.com";
....................
  //public void toModelType_invalidTask_throwsIllegalValueException() {
....................
  //            new JsonAdaptedTask(VALID_NAME, VALID_DESCRIPTION, VALID_MODULE, INVALID_START, VALID_END);
....................
  //    String expectedMessage = TaskTime.MESSAGE_CONSTRAINTS;
....................
  //    assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);
....................
  //}
....................
  //public void toModelType_nullEmail_throwsIllegalValueException() {
....................
  //    JsonAdaptedTask task = new JsonAdaptedTask(VALID_NAME, VALID_DESCRIPTION, null, VALID_START, VALID_END);
....................
  //    String expectedMessage = String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());
....................
  //    assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);
....................
  //}
....................
  //public void toModelType_invalidAddress_throwsIllegalValueException() {
....................
  //            new JsonAdaptedTask(VALID_NAME, VALID_DESCRIPTION, VALID_MODULE, INVALID_START, VALID_END);
....................
  //    String expectedMessage = Address.MESSAGE_CONSTRAINTS;
....................
  //   assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);
....................
  //}
....................
  //public void toModelType_nullAddress_throwsIllegalValueException() {
....................
  //    JsonAdaptedTask task = new JsonAdaptedTask(VALID_NAME, VALID_DESCRIPTION, VALID_MODULE, null, VALID_END);
....................
  //    String expectedMessage = String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());
....................
  //    assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);
....................
  //}
....................
  //public void toModelType_invalidTags_throwsIllegalValueException() {
....................
  //    List<JsonAdaptedTag> invalidTags = new ArrayList<>(VALID_END);
....................
  //    invalidTags.add(new JsonAdaptedTag(INVALID_TAG));
....................
  //            new JsonAdaptedTask(VALID_NAME, VALID_DESCRIPTION, VALID_MODULE, VALID_START, invalidTags);
....................
  //    assertThrows(IllegalValueException.class, task::toModelType);
....................
  //}

==================================================================[[calvintanwj]]
  //package seedu.address.model.tag;
....................
  //import java.util.List;
....................
  //import java.util.function.Predicate;
....................
  //import java.util.stream.Collectors;
....................
  //import seedu.address.model.guest.Guest;
....................
  //public class TagContainsKeywordsPredicate implements Predicate<Person> {
....................
  //    private final List<Tag> tags;
....................
  //    public TagContainsKeywordsPredicate(List<Tag> tags) {
....................
  //        this.tags = tags;
....................
  //    }
....................
  //    public boolean test(Person person) {
....................
  //        if (tags.isEmpty()) {
....................
  //            return false;
....................
  //        }
....................
  //        if (person instanceof Staff) {
....................
  //            Staff staff = (Staff) person;
....................
  //                    .filter(tag -> staff.getTags().contains(tag)).collect(Collectors.toList()).size() == tags.size();
....................
  //        } else {
....................
  //            Guest guest = (Guest) person;
....................
  //                    .filter(tag -> guest.getTags().contains(tag)).collect(Collectors.toList()).size() == tags.size();
....................
  //        }
....................
  //    }
....................
  //    public boolean equals(Object other) {
....................
  //    }
....................
  //    public List<Tag> getTags() {
....................
  //        return tags;
....................
  //    }
....................
  //}
....................
  //            showGuestAtPassportNumber(model, PASSPORT_NUMBER_FIRST_PERSON);
....................
  //            assertTrue(outOfBoundIndex.getZeroBased() < model.getGuestBook().getPersonList().size());
....................
  //    public void execute_invalidPassportNumberFilteredList_failure() {
....................
  //        showPersonAtIndex(model, INDEX_FIRST_PERSON);
....................
  //        Index outOfBoundIndex = INDEX_SECOND_PERSON;
....................
  //        assertTrue(outOfBoundIndex.getZeroBased() < model.getVendorBook().getPersonList().size());
....................
  //                new EditPersonDescriptorBuilder().withName(VALID_NAME_DANIEL).build());
....................
  //        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);
....................
  //    }

==================================================================[[Yukun99]]
  //    public PersonAddSubGroupCommand parse(String args) throws ParseException {
....................
  //        requireNonNull(args);
....................
  //        ArgumentMultimap argMultimap = ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_GROUP, PREFIX_SUBGROUP);
....................
  //            || !argMultimap.getPreamble().isEmpty()) {
....................
  //                PersonAddSubGroupCommand.MESSAGE_USAGE));
....................
  //        }
....................
  //        String personName = argMultimap.getValue(PREFIX_NAME).get();
....................
  //        String groupName = argMultimap.getValue(PREFIX_GROUP).get();
....................
  //        String subGroupName = argMultimap.getValue(PREFIX_SUBGROUP).get();
....................
  //        return new PersonAddSubGroupCommand(personName, groupName, subGroupName);
....................
  //    }
....................
  //    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {
....................
  //        return Stream.of(prefixes).allMatch(prefix -> argumentMultimap.getValue(prefix).isPresent());
....................
  //    }
....................
  //    public PersonRemoveSubGroupCommand parse(String args) throws ParseException {
....................
  //        requireNonNull(args);
....................
  //        ArgumentMultimap argMultimap = ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_GROUP, PREFIX_SUBGROUP);
....................
  //                || !argMultimap.getPreamble().isEmpty()) {
....................
  //                    PersonAddSubGroupCommand.MESSAGE_USAGE));
....................
  //        }
....................
  //        String personName = argMultimap.getValue(PREFIX_NAME).get();
....................
  //        String groupName = argMultimap.getValue(PREFIX_GROUP).get();
....................
  //        String subGroupName = argMultimap.getValue(PREFIX_SUBGROUP).get();
....................
  //        return new PersonRemoveSubGroupCommand(personName, groupName, subGroupName);
....................
  //    }
....................
  //    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {
....................
  //        return Stream.of(prefixes).allMatch(prefix -> argumentMultimap.getValue(prefix).isPresent());
....................
  //    }
....................
  //                (PersonEditCommand) parser.parseCommand(PersonUtil.getEditPersonDescriptorCommand(1, descriptor));
....................
  //        .MESSAGE_USAGE));

==================================================================[[dannylty]]
  // assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);
....................
  //public void execute_duplicateGameEntry_throwsCommandException() {
....................
  //    GameEntry gameEntryInList = model.getGameBook().getGameEntryList().get(0);
....................
  //    assertCommandFailure(new AddCommand(gameEntryInList), model, AddCommand.MESSAGE_DUPLICATE_GAME);
....................
  //}
....................
  //                 + GAMEONE.locationWithPrefix + GAMEONE.tagWithPrefix, expectedMessage);
....................
  //                 + GAMEONE.locationWithPrefix + GAMEONE.tagWithPrefix, expectedMessage);
....................
  //     + VALID_DATE_1 + VALID_DURATION_1 + VALID_LOCATION_1 + VALID_TAG_1, expectedMessage);
....................
  // assertPreamblePresent(argMultimap, "SomePreambleString");
....................
  // assertArgumentPresent(argMultimap, pSlash, "pSlash value");
....................
  // assertArgumentPresent(argMultimap, dashT, "dashT-Value", "another dashT value", "");
....................
  // assertArgumentPresent(argMultimap, hatQ, "", "");
....................
  // assertThrows(TokenizerException.class, () -> {
....................
  //     ArgumentMultimap argMultimap = ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);
....................
  // });
....................
  // assertParseFailure(parser, userInput, MESSAGE_DUPLICATE_FLAGS);
....................
  // import static seedu.gamebook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;
....................
  // import static seedu.gamebook.logic.parser.CommandParserTestUtil.assertParseFailure;
....................
  //        .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();
....................
  //        .build();

==================================================================[[SKCheongBrian]]
  // import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;
....................
  // import static seedu.address.logic.commands.CommandTestUtil.GROUP_NAME_DESC_AMY;
....................
  // import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;
....................
  // import static seedu.address.testutil.TypicalStudents.AMY;
....................
  // import seedu.address.logic.commands.AddCommand;
....................
  // import seedu.address.model.student.Student;
....................
  // import seedu.address.testutil.StudentBuilder;
....................
  //    public void execute_storageThrowsIoException_throwsCommandException() {
....................
  //                .resolve("ioExceptionAddressBook.json"));
....................
  //                new JsonUserPrefsStorage(temporaryFolder.resolve("ioExceptionUserPrefs.json"));
....................
  //        StorageManager storage = new StorageManager(addressBookStorage, userPrefsStorage);
....................
  //        logic = new LogicManager(model, storage);
....................
  //                + GROUP_NAME_DESC_AMY;
....................
  //        Student expectedStudent = new StudentBuilder(AMY).build();
....................
  //        ModelManager expectedModel = new ModelManager();
....................
  //        expectedModel.addStudent(expectedStudent);
....................
  //        String expectedMessage = LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;
....................
  //assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);
....................
  //}

==================================================================[[NoraYUuu]]
  //    public void parse_allFieldsPresent_success() {
....................
  //              + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));
....................
  //                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));
....................
  //                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));
....................
  //                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));
....................
  //                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));
....................
  //                .build();
....................
  //                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));
....................
  //    }
....................
  //    public void parse_invalidValue_failure() {
....................
  //                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);
....................
  //                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);
....................
  //                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);
....................
  //                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);
....................
  //                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);
....................
  //                Name.MESSAGE_CONSTRAINTS);
....................
  //                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));
....................
  //    }

==================================================================[[wengYing227]]
  // public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {
....................
  //    StringBuilder sb = new StringBuilder();
....................
  //    descriptor.getName().ifPresent(name -> sb.append(PREFIX_NAME).append(name.fullName).append(" "));
....................
  //    descriptor.getPhone().ifPresent(phone -> sb.append(PREFIX_PHONE).append(phone.value).append(" "));
....................
  //    descriptor.getEmail().ifPresent(email -> sb.append(PREFIX_EMAIL).append(email.value).append(" "));
....................
  //    descriptor.getAddress().ifPresent(address -> sb.append(PREFIX_ADDRESS).append(address.value).append(" "));
....................
  //    if (descriptor.getTags().isPresent()) {
....................
  //        Set<Tag> tags = descriptor.getTags().get();
....................
  //        if (tags.isEmpty()) {
....................
  //            sb.append(PREFIX_TAG);
....................
  //        } else {
....................
  //            tags.forEach(s -> sb.append(PREFIX_TAG).append(s.tagName).append(" "));
....................
  //        }
....................
  //    }
....................
  //    return sb.toString();
....................
  // }

==================================================================[[amzhy]]
  //private final ArrayList<String> student = new ArrayList<>();
....................
  //assertCommandSuccess(remarkClassCommand, model, expectedMessage, expectedModel);
....................
  //assertCommandSuccess(remarkClassCommand, model, expectedMessage, expectedModel);
....................
  //assertCommandSuccess(remarkClassCommand, model, expectedMessage, expectedModel);
....................
  // assertCommandFailure(remarkClassCommand, model, Messages.MESSAGE_INVALID_CLASS_DISPLAYED_INDEX);
....................
  //assertFalse(standardCommand.equals(new RemarkClassCommand(INDEX_FIRST)));
....................
  //assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);
....................
  //assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);
....................
  //assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);
....................
  //assertFalse(standardCommand.equals(new RemarkCommand(INDEX_FIRST, new Remark(VALID_REMARK_BOB))));

==================================================================[[Yttruire]]
  //import seedu.address.logic.commands.AddCommand;
....................
  //import static org.junit.jupiter.api.Assertions.assertEquals;
....................
  //import static org.junit.jupiter.api.Assertions.assertEquals;
....................
  //import static seedu.address.testutil.TypicalStudents.ALICE;
....................
  //import static seedu.address.testutil.TypicalStudents.HOON;
....................
  //import static seedu.address.testutil.TypicalStudents.IDA;
....................
  //import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;
....................
  //import static org.junit.jupiter.api.Assertions.assertEquals;
....................
  //import seedu.address.testutil.TypicalStudents;
....................
  //import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;

==================================================================[[Ongzl]]
  //internalList.setAll(classes);
....................
  //expectedModel.addTuitionClass(expectedStudent.getClassList().get(0));
....................
  //predicate = new NameContainsKeywordsPredicate(Arrays.asList("Bob", "Carol"));
....................
  //assertTrue(predicate.test(new PersonBuilder().withName("Alice Carol").build()));
....................
  //assertFalse(predicate.test(new PersonBuilder().withName("Alice").build()));
....................
  //if (descriptor.getTuitionClasses().isPresent()) {
....................
  //    List<TuitionClass> tuitionClasses = descriptor.getTuitionClasses().get();
....................
  //    if(tuitionClasses.isEmpty()) {
....................
  //    }
....................
  //}

==================================================================[[samyipsh]]
  //assertCommandFailure(openGithubFieldCommand, model, unsupportedFieldFailure);
....................
  //        model.updateFilteredPersonList(predicateNoPersons);
....................
  //        Index firstIndex = INDEX_FIRST_PERSON;
....................
  //        assertTrue(firstIndex.getZeroBased() < model.getContactBook().getPersonList().size());
....................
  //        List<Index> invalidIndex = new ArrayList<>();
....................
  //        invalidIndex.add(firstIndex);
....................
  //        OpenFieldCommand openGithubFieldCommand = new OpenFieldCommand(invalidIndex, "github");
....................
  //                String.format(MESSAGE_NO_DISPLAYED_PERSONS));

==================================================================[[uyencfi]]
  // Score editedMaxScore = editedAssignment.getMaxScore();
....................
  // public ReadOnlyEdRecord getEdRecord() {
....................
  //     return new EdRecord();
....................
  // }
....................
  // public static final Module CS2103 = new Module("CS2103", getTypicalGroupSystem());
....................
  // public static final Module CS2103T = new Module("CS2103T", getTypicalGroupSystem());
....................
  // public static final Module CS3230 = new Module("CS3230", getTypicalGroupSystem());

==================================================================[[markuslim24]]
  //  if (!TaskDescription.isValidDescription(trimmedD)) {
....................
  //       throw new ParseException(TaskDescription.MESSAGE_CONSTRAINTS);
....................
  // }
....................
  //parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editTaskDescriptor::setTags);
....................
  //checkArgument(checkStartHasEnd(start, end), MESSAGE_START_WITHOUT_END);
....................
  //checkArgument(checkStartHasEnd(start, end), MESSAGE_START_WITHOUT_END);
....................
  // final Set<Tag> modelTags = new HashSet<>(taskTags);

==================================================================[[gok99]]
  //    public void toModelType_typicalPersonsFile_success() throws Exception {
....................
  //                JsonSerializableAddressBook.class).get();
....................
  //        AddressBook addressBookFromFile = dataFromFile.toModelType();
....................
  //        AddressBook typicalPersonsAddressBook = TypicalPersons.getTypicalAddressBook();
....................
  //        System.out.println(addressBookFromFile.equals(typicalPersonsAddressBook));
....................
  //        assertEquals(addressBookFromFile, typicalPersonsAddressBook);
....................
  //    }

==================================================================[[meixuanjin]]
  //assert(typeKeywords[0].length() == 2);
....................
  //public void parseCommand_find() throws Exception {
....................
  //    List<String> keywords = Arrays.asList("foo", "bar", "baz");
....................
  //            FindCommand.COMMAND_WORD + " n/" + keywords.stream().collect(Collectors.joining(" ")));
....................
  //    assertEquals(new FindCommand(new PartialKeyContainsKeywordsPredicate(keywords, NAMETYPE)), command);
....................
  //}

==================================================================[[kevin9foong]]
  //    public void toModelType_invalidGameFriendLink_throwsIllegalValueException() {
....................
  //        List<JsonAdaptedGameFriendLink> invalidGameFriendLinks = new ArrayList<>(VALID_GAME_FRIEND_LINK);
....................
  //        invalidGameFriendLinks.add(new JsonAdaptedGameFriendLink(INVALID_GAME));
....................
  //                new JsonAdaptedFriend(VALID_FRIEND_ID, VALID_NAME, invalidGameFriendLinks);
....................
  //        assertThrows(IllegalValueException.class, friend::toModelType);
....................
  //    }

==================================================================[[rgbpokka]]
  //        updateFilteredGuestList(PREDICATE_SHOW_ALL_GUESTS);
....................
  //        public void execute_invalidPassportNumberFilteredList_failure() {
....................
  //            Index outOfBoundIndex = INDEX_SECOND_PERSON;
....................
  //            assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);
....................
  //        }
....................
  //        this.name = new Name("name");

==================================================================[[houtenteo]]
  //    public void parseCommand_edit() throws Exception {
....................
  //        Person person = new PersonBuilder().build();
....................
  //        EditPersonDescriptor descriptor = new EditPersonDescriptorBuilder(person).build();
....................
  //                + INDEX_FIRST_PERSON.getOneBased() + " " + PersonUtil.getEditPersonDescriptorDetails(descriptor));
....................
  //        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);
....................
  //    }

==================================================================[[BenjaminLHR]]
  // import static seedu.gamebook.logic.parser.ParserTestUtil.VALID_TAG_1;
....................
  // import static seedu.gamebook.logic.parser.ParserTestUtil.VALID_TAG_2;
....................
  // import seedu.gamebook.logic.commands.Command;
....................
  // import seedu.gamebook.model.gameentry.Amount;
....................
  // import seedu.gamebook.logic.parser.exceptions.ParseException;

==================================================================[[adam-ky]]
  //import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;
....................
  //import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;
....................
  //import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;
....................
  //import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;
....................
  //import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;

==================================================================[[tanqiya]]
  //import teletubbies.logic.commands.AddCommand;
....................
  //import teletubbies.logic.commands.CommandTestUtil;
....................
  //import teletubbies.model.person.Person;
....................
  //import teletubbies.testutil.PersonBuilder;
....................
  //import teletubbies.testutil.TypicalPersons;

==================================================================[[bingcheng45]]
  // final ObjectMapper mapper = new ObjectMapper();
....................
  // final ObjectWriter writer = mapper.writer().withRootName("person123");
....................
  // final String jsonMessage = writer.writeValueAsString(objectToSerialize);
....................
  // FileUtil.writeToFile(jsonFile, jsonMessage);

==================================================================[[timiditi]]
  //import static seedu.address.testutil.TypicalStudents.CARL;
....................
  //import static seedu.address.testutil.TypicalStudents.ELLE;
....................
  //import static seedu.address.testutil.TypicalStudents.FIONA;
....................
  //        Person expectedPerson = new StudentBuilder(BOB).withTags(VALID_TAG_FRIEND).build();

==================================================================[[tanjiaxian99]]
  // import static seedu.address.logic.commands.CommandTestUtil.TELEGRAM_HANDLE_DESC_AMY;
....................
  //import seedu.address.model.CsBook;
....................
  //import seedu.address.model.CsBook;
....................
  //import seedu.address.model.ReadOnlyCsBook;

==================================================================[[nwhloo99]]
  //for (Appointment invalid : findInvalidAppointments(appointments, persons)) {
....................
  //    logger.fine("Deleting Invalid Appointment: " + invalid.toString());
....................
  //    schedule.deleteAppointment(invalid);
....................
  //}

==================================================================[[crypto-code]]
  //runningThreads.remove(temp);
....................
  //e.printStackTrace();
....................
  //e.printStackTrace();
....................
  //e.printStackTrace();

==================================================================[[reddevil1313]]
  //System.out.println(NAME_DESC_BOB);
....................
  //System.out.println(NAME_DESC_BOB);
....................
  //System.out.println(userInput);

==================================================================[[darrenhoon]]
  //return Objects.hash(name, phone, email, address, tags, id);
....................
  //System.out.println("Expected Model is: " + expectedModel.getFilteredPersonList());
....................
  //System.out.println("Actual Model is: " + model.getFilteredPersonList());

==================================================================[[boonhaii]]
  //import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;
....................
  //import seedu.address.model.AddressBook;
....................
  //import seedu.address.model.UserPrefs;

==================================================================[[ramaven]]
  //assertCommandSuccess(command, model, expectedMessage, expectedModel);
....................
  //assertEquals(Arrays.asList(MEETING, CONFLICTING_MEETING), model.getFilteredActivityListById());
....................
  //assertCommandSuccess(command, model, expectedMessage, expectedModel);

==================================================================[[chowRuiYan]]
  //String[] keywords = TypicalLinks.ALICE.getName().fullName.split("\\s+");
....................
  //modelManager.updateFilteredLinkList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));
....................
  //assertFalse(modelManager.equals(new ModelManager(manageMe, userPrefs)));

==================================================================[[mweeruien]]
  // assertCommandSuccess(command, model, expectedMessage, expectedModel);
....................
  // assertCommandSuccess(command, model, expectedMessage, expectedModel);
....................
  // assertEquals(new Salary("1.999").toString(), "1.99");

==================================================================[[czhi-bin]]
  // null -> returns false;
....................
  // different type -> return false;
....................
  // different index -> return false;

==================================================================[[WangGLJoseph]]
  // public static final Prefix PREFIX_STUDENT_NAME = new Prefix("s/");
....................
  // public static final Prefix PREFIX_WEIGHTAGE = new Prefix("w/");

==================================================================[[NaokiShum]]
  //import java.util.Comparator;
....................
  //import java.util.Comparator;

==================================================================[[tanruiquan]]
  // same object -> returns true;
....................
  // same values -> returns true;

==================================================================[[tanhuakun]]
  // first cross-check with all groups;
....................
  //lessonScheduleView.setItems(lessonWithAttendees);

==================================================================[[eugenecsa]]
  // null -> return false;
....................
  // null -> return false;

==================================================================[[Imerbear]]
  // create emptyModel and emptyExpectedModel of empty filteredContacts;
....................
  // create emptyModel and emptyExpectedModel of empty filteredContacts;

==================================================================[[Zacchua]]
  //import static java.util.Objects.requireNonNull;
....................
  // Assert.assertThrows(NullPointerException.class, () -> new Telegram(null));

==================================================================[[VimuthM]]
  // Set<Tag> updatedTags = editPersonDescriptor.getTags().orElse(personToEdit.getTags());
....................
  //import static safeforhall.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;

==================================================================[[kaixin-hc]]
  // import seedu.notor.logic.parser.person.PersonFindCommandParser;
....................
  //    private final PersonFindCommandParser parser = new PersonFindCommandParser();

==================================================================[[Shivlock221b]]
  //same object -> returns true;
....................
  //same values -> return true;

==================================================================[[bernarduskrishna]]
  // System.out.println(items);

==================================================================[[Kimowarui]]
  //logic.getFilteredHistoryList().add(new History(commandText));

==================================================================[[joshenx]]
  //menuItem.setAccelerator(keyCombination);

==================================================================[[bryanwee023]]
  // zero tags;

==================================================================[[didymental]]
  //MedicalHistory copiedMedicalHistory = copy(this);

==================================================================[[RonaldTanSingWei]]
  //public Path testFolder;

==================================================================[[bklimey]]
  //String formattedInput = "[" + PREFIX_SOCIAL_HANDLE + socialHandle + "] ";

==================================================================[[luluyousef]]
  //assertTrue(firstPredicate.equals(secondPredicate));

==================================================================[[limzk126]]
  //viewAllTaskListPersons = viewAllTaskListPersons.filtered(person -> !person.getTasks().isEmpty());

==================================================================[[Leofeng10]]
  //sampleClasses.add(sampleTuitionClass);

==================================================================[[wanyu-l]]
  //return Objects.hash(name, phone, email, address, tags, remark, status, positions);

==================================================================[[kflim]]
  // null -> return false;

==================================================================[[leonghongfai]]
  //different Tag description -> returns false;

==================================================================[[wilburrito]]
  //private final int idCounter;

==================================================================[[BananaTechs]]
  //assertThrows(UnsupportedOperationException.class, () -> room.getGuests().remove(0));

==================================================================[[CrownKira]]
  // + " (" + clients.size() + ")";

==================================================================[[djiangel]]
  // throw new PersonNotFoundException();

==================================================================[[XXJJXJ]]
  // throw new IllegalValueException(BirthDate.MESSAGE_DATE_CONSTRAINTS);

==================================================================[[KelvinSoo]]
  //public final LocalTime time;

==================================================================[[idgrr]]
  // return Objects.hash(name, phone, email);

==================================================================[[juliussneezer04]]
  //import seedu.address.model.tutorialclass.TutorialClass;

==================================================================[[NicolasCwy]]
  //                    new EditPersonDescriptorBuilder().withName(VALID_NAME_BENSON).build());

==================================================================[[softmagnet]]
  // sort the StudentNameList;

==================================================================[[bernardwan]]
  // model stub with a empty class;

==================================================================[[ryanpeh]]
  // private QuestionListPanel questionListPanel;

==================================================================[[qinguorui2001]]
  //assertEquals(expectedModel, actualModel);

==================================================================[[LeopardMerkava]]
  // Check cache is not null;

==================================================================[[JeffZincatz]]
  // public static final String MESSAGE_CONSTRAINTS = "";

==================================================================[[jaredlhf]]
  //assertFalse(LastDate.isValidDate(""));

==================================================================[[rebeccalaujx]]
  //        "Name should not be changed for more than one person.\n" + EditPersonCommand.MESSAGE_USAGE);

==================================================================[[xiongjya]]
  // matching time (matching only minute and hour) -> returns false;

==================================================================[[naranghardik16]]
  //private final Type sortType;

==================================================================[[Banana3021]]
  // originalPerson = personToEdit;

==================================================================[[aakanshanarain]]
  // import java.util.Arrays;